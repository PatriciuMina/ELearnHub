{"ast":null,"code":"function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar name = \"\";\nvar email = \"\";\nvar product_id = \"\";\nvar amount = 0.0;\n\nwindow.onload = function () {\n  name = document.getElementById('name').value;\n  email = document.getElementById('email').value;\n  product_id = document.getElementById('stripe_id').value;\n  amount = document.getElementById('total_price').value;\n  paypal.Buttons({\n    style: {\n      color: \"blue\",\n      shape: \"pill\"\n    },\n    // Sets up the transaction when a payment button is clicked\n    createOrder: function createOrder(data, actions) {\n      return actions.order.create({\n        purchase_units: [{\n          amount: {\n            value: amount // Can also reference a variable or function\n\n          }\n        }]\n      });\n    },\n    // Finalize the transaction after payer approval\n    onApprove: function onApprove(data, actions) {\n      return actions.order.capture().then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(orderData) {\n          var transaction, redirect;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  redirect = function _redirect() {\n                    actions.redirect('http://ubb.lms.com:3000/shop?page=1');\n                  };\n\n                  // Successful capture! For dev/demo purposes:\n                  console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));\n                  transaction = orderData.purchase_units[0].payments.captures[0]; //{method: 'POST'}, {body : ordered_items});\n                  //alert(`Transaction ${transaction.status}: ${transaction.id}\\n\\nSee console for all available details`);\n                  // When ready to go live, remove the alert and show a success message within this page. For example:\n                  // const element = document.getElementById('paypal-button-container');\n                  // element.innerHTML = '<h3>Thank you for your payment!</h3>';\n                  // Or go to another URL:  actions.redirect('thank_you.html');\n\n                  _context.next = 5;\n                  return fetch('/checkout/success_pay_pal_order/', {\n                    method: 'POST',\n                    headers: {\n                      'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                      name: name,\n                      email: email,\n                      product_id: product_id,\n                      amount: amount\n                    })\n                  });\n\n                case 5:\n                  alert(\"You will be redirected after the transaction will be processed.\");\n                  setTimeout(redirect, 3000);\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    onCancel: function onCancel(data) {\n      window.location.replace(\"http://ubb.lms.com:3000/\");\n    }\n  }).render(\"#paypal-button-container\");\n};","map":{"version":3,"names":["name","email","product_id","amount","window","onload","document","getElementById","value","paypal","Buttons","style","color","shape","createOrder","data","actions","order","create","purchase_units","onApprove","capture","then","orderData","redirect","console","log","JSON","stringify","transaction","payments","captures","fetch","method","headers","body","alert","setTimeout","onCancel","location","replace","render"],"sources":["/home/patriciumina/RubymineProjects/lms-app/app/javascript/packs/paypal.js"],"sourcesContent":["var name = \"\";\nvar email = \"\";\nvar product_id = \"\";\nvar amount = 0.0;\n\nwindow.onload = function () {\n\n    name = document.getElementById('name').value;\n    email =  document.getElementById('email').value;\n    product_id = document.getElementById('stripe_id').value;\n    amount = document.getElementById('total_price').value;\n\n    paypal.Buttons({\n\n        style: {\n            color: \"blue\",\n            shape: \"pill\",\n        },\n\n        // Sets up the transaction when a payment button is clicked\n        createOrder: (data, actions) => {\n\n\n            return actions.order.create({\n                purchase_units: [{\n                    amount: {\n                        value: amount // Can also reference a variable or function\n                    }\n                }]\n            });\n        },\n        // Finalize the transaction after payer approval\n        onApprove: (data, actions) => {\n            return actions.order.capture().then(async function (orderData) {\n                // Successful capture! For dev/demo purposes:\n                console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));\n                const transaction = orderData.purchase_units[0].payments.captures[0];\n                //{method: 'POST'}, {body : ordered_items});\n                //alert(`Transaction ${transaction.status}: ${transaction.id}\\n\\nSee console for all available details`);\n                // When ready to go live, remove the alert and show a success message within this page. For example:\n                // const element = document.getElementById('paypal-button-container');\n                // element.innerHTML = '<h3>Thank you for your payment!</h3>';\n                // Or go to another URL:  actions.redirect('thank_you.html');\n                await fetch('/checkout/success_pay_pal_order/',\n                    {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            name: name,\n                            email: email,\n                            product_id: product_id,\n                            amount: amount\n                        })\n                    });\n\n                alert(\"You will be redirected after the transaction will be processed.\");\n                setTimeout(redirect, 3000);\n\n                function redirect() {\n                    actions.redirect('http://ubb.lms.com:3000/shop?page=1');\n                }\n\n\n            });\n        },\n\n        onCancel: (data) => {\n            window.location.replace(\"http://ubb.lms.com:3000/\");\n        }\n    }).render(\"#paypal-button-container\");\n};"],"mappings":"+CACA,oJ;;;;;;AADA,IAAIA,IAAI,GAAG,EAAX;AACA,IAAIC,KAAK,GAAG,EAAZ;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA,IAAIC,MAAM,GAAG,GAAb;;AAEAC,MAAM,CAACC,MAAP,GAAgB,YAAY;EAExBL,IAAI,GAAGM,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,KAAvC;EACAP,KAAK,GAAIK,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,KAA1C;EACAN,UAAU,GAAGI,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,KAAlD;EACAL,MAAM,GAAGG,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,KAAhD;EAEAC,MAAM,CAACC,OAAP,CAAe;IAEXC,KAAK,EAAE;MACHC,KAAK,EAAE,MADJ;MAEHC,KAAK,EAAE;IAFJ,CAFI;IAOX;IACAC,WAAW,EAAE,qBAACC,IAAD,EAAOC,OAAP,EAAmB;MAG5B,OAAOA,OAAO,CAACC,KAAR,CAAcC,MAAd,CAAqB;QACxBC,cAAc,EAAE,CAAC;UACbhB,MAAM,EAAE;YACJK,KAAK,EAAEL,MADH,CACU;;UADV;QADK,CAAD;MADQ,CAArB,CAAP;IAOH,CAlBU;IAmBX;IACAiB,SAAS,EAAE,mBAACL,IAAD,EAAOC,OAAP,EAAmB;MAC1B,OAAOA,OAAO,CAACC,KAAR,CAAcI,OAAd,GAAwBC,IAAxB;QAAA,sEAA6B,iBAAgBC,SAAhB;UAAA,iBA2BvBC,QA3BuB;UAAA;YAAA;cAAA;gBAAA;kBA2BvBA,QA3BuB,wBA2BZ;oBAChBR,OAAO,CAACQ,QAAR,CAAiB,qCAAjB;kBACH,CA7B+B;;kBAChC;kBACAC,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,SAA9B,EAAyCI,IAAI,CAACC,SAAL,CAAeL,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CAAzC;kBACMM,WAH0B,GAGZN,SAAS,CAACJ,cAAV,CAAyB,CAAzB,EAA4BW,QAA5B,CAAqCC,QAArC,CAA8C,CAA9C,CAHY,EAIhC;kBACA;kBACA;kBACA;kBACA;kBACA;;kBATgC;kBAAA,OAU1BC,KAAK,CAAC,kCAAD,EACP;oBACIC,MAAM,EAAE,MADZ;oBAEIC,OAAO,EAAE;sBACL,gBAAgB;oBADX,CAFb;oBAKIC,IAAI,EAAER,IAAI,CAACC,SAAL,CAAe;sBACjB5B,IAAI,EAAEA,IADW;sBAEjBC,KAAK,EAAEA,KAFU;sBAGjBC,UAAU,EAAEA,UAHK;sBAIjBC,MAAM,EAAEA;oBAJS,CAAf;kBALV,CADO,CAVqB;;gBAAA;kBAwBhCiC,KAAK,CAAC,iEAAD,CAAL;kBACAC,UAAU,CAACb,QAAD,EAAW,IAAX,CAAV;;gBAzBgC;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA,CAA7B;;QAAA;UAAA;QAAA;MAAA,IAAP;IAiCH,CAtDU;IAwDXc,QAAQ,EAAE,kBAACvB,IAAD,EAAU;MAChBX,MAAM,CAACmC,QAAP,CAAgBC,OAAhB,CAAwB,0BAAxB;IACH;EA1DU,CAAf,EA2DGC,MA3DH,CA2DU,0BA3DV;AA4DH,CAnED"},"metadata":{},"sourceType":"module"}